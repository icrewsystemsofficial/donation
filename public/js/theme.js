/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/theme.js":
/*!*******************************!*\
  !*** ./resources/js/theme.js ***!
  \*******************************/
/***/ (() => {

eval("\n\n$(window).on(\"load\", function () {}), $(window).on('load resize', function () {\n  // Background image holder - Static hero with fullscreen autosize\n  if ($('.spotlight').length) {\n    $('.spotlight').each(function () {\n      var $this = $(this);\n      var holderHeight;\n\n      if ($this.data('spotlight') == 'fullscreen') {\n        if ($this.data('spotlight-offset')) {\n          var offsetHeight = $('body').find($this.data('spotlight-offset')).height();\n          holderHeight = $(window).height() - offsetHeight;\n        } else {\n          holderHeight = $(window).height();\n        }\n\n        if ($(window).width() > 991) {\n          $this.find('.spotlight-holder').css({\n            'height': holderHeight + 'px'\n          });\n        } else {\n          $this.find('.spotlight-holder').css({\n            'height': 'auto'\n          });\n        }\n      }\n    });\n  }\n}), $(document).ready(function () {\n  // Plugins init\n  $(\".scrollbar-inner\")[0] && $(\".scrollbar-inner\").scrollbar().scrollLock();\n  $('[data-stick-in-parent=\"true\"]')[0] && $('[data-stick-in-parent=\"true\"]').stick_in_parent();\n  $('.selectpicker')[0] && $('.selectpicker').selectpicker();\n  $('.textarea-autosize')[0] && autosize($('.textarea-autosize'));\n  $('[data-toggle=\"tooltip\"]').tooltip();\n  $('[data-toggle=\"popover\"]').each(function () {\n    var popoverClass = '';\n\n    if ($(this).data('color')) {\n      popoverClass = 'popover-' + $(this).data('color');\n    }\n\n    $(this).popover({\n      trigger: 'focus',\n      template: '<div class=\"popover ' + popoverClass + '\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n    });\n  }); // Floating label\n\n  $('.form-control').on('focus blur', function (e) {\n    $(this).parents('.form-group').toggleClass('focused', e.type === 'focus' || this.value.length > 0);\n  }).trigger('blur'); // Custom input file\n\n  $('.custom-input-file').each(function () {\n    var $input = $(this),\n        $label = $input.next('label'),\n        labelVal = $label.html();\n    $input.on('change', function (e) {\n      var fileName = '';\n      if (this.files && this.files.length > 1) fileName = (this.getAttribute('data-multiple-caption') || '').replace('{count}', this.files.length);else if (e.target.value) fileName = e.target.value.split('\\\\').pop();\n      if (fileName) $label.find('span').html(fileName);else $label.html(labelVal);\n    }); // Firefox bug fix\n\n    $input.on('focus', function () {\n      $input.addClass('has-focus');\n    }).on('blur', function () {\n      $input.removeClass('has-focus');\n    });\n  }); // NoUI Slider\n\n  if ($(\".input-slider-container\")[0]) {\n    $('.input-slider-container').each(function () {\n      var slider = $(this).find('.input-slider');\n      var sliderId = slider.attr('id');\n      var minValue = slider.data('range-value-min');\n      var maxValue = slider.data('range-value-max');\n      var sliderValue = $(this).find('.range-slider-value');\n      var sliderValueId = sliderValue.attr('id');\n      var startValue = sliderValue.data('range-value-low');\n      var c = document.getElementById(sliderId),\n          d = document.getElementById(sliderValueId);\n      noUiSlider.create(c, {\n        start: [parseInt(startValue)],\n        connect: [true, false],\n        //step: 1000,\n        range: {\n          'min': [parseInt(minValue)],\n          'max': [parseInt(maxValue)]\n        }\n      });\n      c.noUiSlider.on('update', function (a, b) {\n        d.textContent = a[b];\n      });\n    });\n  }\n\n  if ($(\"#input-slider-range\")[0]) {\n    var c = document.getElementById(\"input-slider-range\"),\n        d = document.getElementById(\"input-slider-range-value-low\"),\n        e = document.getElementById(\"input-slider-range-value-high\"),\n        f = [d, e];\n    noUiSlider.create(c, {\n      start: [parseInt(d.getAttribute('data-range-value-low')), parseInt(e.getAttribute('data-range-value-high'))],\n      connect: !0,\n      range: {\n        min: parseInt(c.getAttribute('data-range-value-min')),\n        max: parseInt(c.getAttribute('data-range-value-max'))\n      }\n    }), c.noUiSlider.on(\"update\", function (a, b) {\n      f[b].textContent = a[b];\n    });\n  } // Scroll to anchor with animation\n\n\n  $('.scroll-me, .toc-entry a').on('click', function (event) {\n    var hash = $(this).attr('href');\n    var offset = $(this).data('scroll-to-offset') ? $(this).data('scroll-to-offset') : 0; // Animate scroll to the selected section\n\n    $('html, body').stop(true, true).animate({\n      scrollTop: $(hash).offset().top - offset\n    }, 600);\n    event.preventDefault();\n  });\n}), $(document).ready(function () {\n  $(\"body\").on(\"click\", \"[data-action]\", function (e) {\n    e.preventDefault();\n    var $this = $(this);\n    var action = $this.data('action');\n    var target = '';\n\n    switch (action) {\n      case \"offcanvas-open\":\n        target = $this.data(\"target\"), $(target).addClass(\"open\"), $(\"body\").append('<div class=\"body-backdrop\" data-action=\"offcanvas-close\" data-target=' + target + \" />\");\n        break;\n\n      case \"offcanvas-close\":\n        target = $this.data(\"target\"), $(target).removeClass(\"open\"), $(\"body\").find(\".body-backdrop\").remove();\n        break;\n\n      case 'aside-open':\n        target = $this.data('target');\n        $this.data('action', 'aside-close');\n        $this.addClass('toggled');\n        $(target).addClass('toggled');\n        $('.content').append('<div class=\"body-backdrop\" data-action=\"aside-close\" data-target=' + target + ' />');\n        break;\n\n      case 'aside-close':\n        target = $this.data('target');\n        $this.data('action', 'aside-open');\n        $('[data-action=\"aside-open\"], ' + target).removeClass('toggled');\n        $('.content, .header').find('.body-backdrop').remove();\n        break;\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/theme.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/theme.js"]();
/******/ 	
/******/ })()
;